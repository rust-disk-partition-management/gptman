name: Rust

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        rust:
          - stable
          - msrv
          - 1.64.0 # cli MSRV
        include:
          - os: ubuntu-latest
            rust: stable
            lint: 1
          - rust: stable
            rust-args: --all-features
          - rust: 1.64.0
            rust-args: --all-features
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Select Rust version
        shell: bash
        run: |
          RUST_VER="${{ matrix.rust }}"
          if [ "$RUST_VER" = msrv ]; then
              RUST_VER=$(cargo metadata --format-version 1 --no-deps | \
                  jq -r '.packages[0].rust_version')
              echo "MSRV: $RUST_VER"
          fi
          echo "RUST_VER=$RUST_VER" >> $GITHUB_ENV

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VER }}
          default: true
          override: true

      - uses: Swatinem/rust-cache@v1

      - name: cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace ${{ matrix.rust-args }}

      - name: rustfmt
        if: github.event_name == 'pull_request' && matrix.lint
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: clippy
        if: github.event_name == 'pull_request' && matrix.lint
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all --tests --all-features -- -D warnings
